Day 1:
1. 661.Image Smoother(easy)
      class Solution {
    public int[][] imageSmoother(int[][] img) {
        int m = img.length, n = img[0].length;
        int[][] result = new int[m][n];
        int[] directions = {-1, 0, 1};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int sum = 0, count = 0;
                for (int dx : directions) {
                    for (int dy : directions) {
                        int x = i + dx, y = j + dy;
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            sum += img[x][y];
                            count++;
                        }
                    }
                }
                result[i][j] = sum / count; 
            }
        }
        return result;
    }
}


Day 2:
1. 2970.Count the number of Incremovable Subarrays 1
class Solution {
    public int incremovableSubarrayCount(int[] nums) {
        int n = nums.length;
        int count = 0;
        for (int start = 0; start < n; start++) {
            for (int end = start; end < n; end++) {
                if (isStrictlyIncreasingAfterRemoval(nums, start, end)) {
                    count++;
                }
            }
        }

        return count;
    }

    private boolean isStrictlyIncreasingAfterRemoval(int[] nums, int start, int end) {
        int n = nums.length;
        int prev = -1; 
        for (int i = 0; i < start; i++) {
            if (nums[i] <= prev) {
                return false; 
            }
            prev = nums[i];
        }
        for (int i = end + 1; i < n; i++) {
            if (nums[i] <= prev) {
                return false; 
            }
            prev = nums[i];
        }

        return true;
    }
}


Day 3:
1.1401.Circle and Rectangle Overlapping

class Solution {
    public boolean checkOverlap(int radius, int xCenter, int yCenter, int x1, int y1, int x2, int y2) {
        int closestX = clamp(xCenter, x1, x2);
        int closestY = clamp(yCenter, y1, y2);
        int deltaX = xCenter - closestX;
        int deltaY = yCenter - closestY;
        int distanceSquared = deltaX * deltaX + deltaY * deltaY;
        return distanceSquared <= radius * radius;
    }
    private int clamp(int value, int min, int max) {
        return Math.max(min, Math.min(value, max));
    }
}
